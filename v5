<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>UV Index - Hourly & Animated</title>
<style>
body {
  font-family: system-ui,-apple-system,Segoe UI,Roboto;
  display:flex;
  flex-direction:column;
  align-items:center;
  background:#f6f8fa;
  margin:0;
  padding:20px;
}
.card {
  background:white;
  padding:20px;
  border-radius:12px;
  box-shadow:0 6px 24px rgba(0,0,0,0.08);
  width:380px;
  margin-bottom:30px;
}
.big { font-size:48px; font-weight:700; }
.small { color:#666; }
input { width:100%; padding:8px; border-radius:8px; border:1px solid #ddd; margin-top:8px; }
.btn { margin-top:12px; padding:8px 12px; border-radius:8px; border:0; background:#0b74de; color:white; cursor:pointer; }
.uv-circle { position: relative; width:120px; height:120px; border-radius:50%; margin: 20px auto; }
.uv-circle svg { transform: rotate(-90deg); }
.uv-circle circle.bg { fill:none; stroke:#ddd; stroke-width:12; }
.uv-circle circle.fg { fill:none; stroke-width:12; stroke-linecap:round; stroke-dasharray: 339.292; stroke-dashoffset: 339.292; transition: stroke-dashoffset 1s ease, stroke 1s ease; }
.uv-value { position:absolute; top:50%; left:50%; transform:translate(-50%,-50%); font-size:32px; font-weight:bold; }
.uv-low { stroke:#a8e05f; }
.uv-moderate { stroke:#fdd835; }
.uv-high { stroke:#f97306; }
.uv-veryhigh { stroke:#ef4444; }
.uv-extreme { stroke:#9b30ff; }
table { width:100%; border-collapse: collapse; font-family: Arial, sans-serif; text-align:center; margin-bottom:30px; }
table th, table td { padding:8px; }
table thead { background:#0b74de; color:white; }
#uv-table tbody tr:hover { transform: scale(1.02); box-shadow: 0 4px 12px rgba(0,0,0,0.15); }
#uv-table tbody tr.highlight { outline: 3px solid black; font-weight: bold; }
.hourly-table td, .hourly-table th { border:1px solid #ddd; padding:5px; font-size:12px; }
.hourly-table { border-collapse: collapse; width:100%; margin-top:20px; }
</style>
</head>
<body>

<div class="card">
  <div style="display:flex;justify-content:space-between;align-items:center">
    <div>
      <div class="small">Current UV Index</div>
      <div class="uv-circle">
        <svg width="120" height="120">
          <circle class="bg" r="54" cx="60" cy="60"></circle>
          <circle class="fg" r="54" cx="60" cy="60"></circle>
        </svg>
        <div class="uv-value" id="uv">--</div>
      </div>
      <div id="desc" class="small">Waiting for data</div>
    </div>
    <div style="text-align:right">
      <div class="small">Location:</div>
      <div id="coords" class="small">—</div>
    </div>
  </div>

  <hr style="margin:14px 0">

  <div class="small">Enter coordinates (lat,lon) or use location:</div>
  <input id="manual" placeholder="e.g., 39.92,32.85 or leave empty" />
  <div style="display:flex;gap:8px;margin-top:8px">
    <button class="btn" id="geo">Use My Location</button>
    <button class="btn" id="check">Fetch UV</button>
  </div>
</div>

<h3 style="text-align:center">UV Index Categories</h3>
<table id="uv-table">
  <thead>
    <tr><th>UV Index</th><th>Category</th><th>Color</th><th>Protection Advice</th></tr>
  </thead>
  <tbody>
    <tr data-min="0" data-max="2" style="background:#a8e05f;"><td>0-2</td><td>Low</td><td>Green</td><td>Normal protection is sufficient</td></tr>
    <tr data-min="3" data-max="5" style="background:#fdd835; color:#333;"><td>3-5</td><td>Moderate</td><td>Yellow</td><td>Wear sunglasses and a hat</td></tr>
    <tr data-min="6" data-max="7" style="background:#f97306;"><td>6-7</td><td>High</td><td>Orange</td><td>Avoid sun, use sunscreen</td></tr>
    <tr data-min="8" data-max="10" style="background:#ef4444;"><td>8-10</td><td>Very High</td><td>Red</td><td>Minimize time outdoors, wear protective clothing</td></tr>
    <tr data-min="11" data-max="99" style="background:#9b30ff; color:white;"><td>11+</td><td>Extreme</td><td>Purple</td><td>Stay in the shade if possible, maximum protection</td></tr>
  </tbody>
</table>

<h3 style="text-align:center">Hourly UV Index (UTC)</h3>
<table class="hourly-table" id="hourly-table">
  <thead>
    <tr id="hours-header"></tr>
  </thead>
  <tbody>
    <tr id="uv-values-row"></tr>
  </tbody>
</table>

<script>
const uvEl = document.getElementById('uv');
const descEl = document.getElementById('desc');
const coordsEl = document.getElementById('coords');
const manual = document.getElementById('manual');
const fgCircle = document.querySelector('.fg');
const hoursHeader = document.getElementById('hours-header');
const uvValuesRow = document.getElementById('uv-values-row');

function uvCategory(val){
  if(val===null||val===undefined) return 'Unknown';
  if(val<3) return 'Low';
  if(val<6) return 'Moderate';
  if(val<8) return 'High';
  if(val<11) return 'Very High';
  return 'Extreme';
}
function uvColor(val){
  if(val<3) return '#a8e05f';
  if(val<6) return '#fdd835';
  if(val<8) return '#f97306';
  if(val<11) return '#ef4444';
  return '#9b30ff';
}

async function fetchUV(lat, lon){
  uvEl.textContent='...';
  descEl.textContent='Fetching data';
  coordsEl.textContent=`${lat.toFixed(5)}, ${lon.toFixed(5)}`;

  try{
    const res = await fetch(`https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&hourly=uv_index&timezone=UTC`);
    if(!res.ok) throw new Error('API error: '+res.status);
    const data = await res.json();

    const now = new Date();
    const y = now.getUTCFullYear();
    const m = String(now.getUTCMonth()+1).padStart(2,'0');
    const d = String(now.getUTCDate()).padStart(2,'0');
    const h = String(now.getUTCHours()).padStart(2,'0');
    const target = `${y}-${m}-${d}T${h}:00`;

    const times = data.hourly.time || [];
    const uvs = data.hourly.uv_index || [];
    let i = times.indexOf(target);
    if(i===-1){ let best=0,mindiff=Infinity; for(let j=0;j<times.length;j++){ const t=new Date(times[j]+'Z'); const diff=Math.abs(t-now); if(diff<mindiff){ mindiff=diff; best=j; } } i=best; }

    const uvVal = (uvs[i]===undefined)? null: uvs[i];
    uvEl.textContent=(uvVal===null)? '—' : uvVal.toFixed(1);
    descEl.textContent=uvCategory(uvVal)+(uvVal!==null ? ` • Hour (UTC): ${times[i].slice(11)}`:'');
    
    highlightUVRow(uvVal);
    animateUVCircle(uvVal);
    renderHourlyTable(times, uvs);

  }catch(err){
    uvEl.textContent='Error';
    descEl.textContent=err.message;
  }
}

function highlightUVRow(uvVal){
  const rows=document.querySelectorAll('#uv-table tbody tr');
  rows.forEach(r=>r.classList.remove('highlight'));
  rows.forEach(r=>{ const min=parseFloat(r.dataset.min), max=parseFloat(r.dataset.max); if(uvVal>=min && uvVal<=max) r.classList.add('highlight'); });
}

function animateUVCircle(uvVal){
  const maxVal = 11;
  const percent = Math.min(uvVal/maxVal,1);
  const dashOffset = 339.292*(1-percent);
  fgCircle.style.strokeDashoffset=dashOffset;
  fgCircle.style.stroke=uvColor(uvVal);
}

function renderHourlyTable(times, uvs){
  hoursHeader.innerHTML=''; uvValuesRow.innerHTML='';
  for(let j=0;j<24;j++){
    const t = times[j] ? new Date(times[j]+'Z') : null;
    const hour = t ? t.getUTCHours() : j;
    hoursHeader.innerHTML+=`<th>${hour}:00</th>`;
    const uv = uvs[j] !== undefined ? uvs[j] : '-';
    const color = uvColor(uv);
    uvValuesRow.innerHTML+=`<td style="background:${color}; color:${uv>=6?'white':'black'}">${uv}</td>`;
  }
}

document.getElementById('geo').onclick = () => {
  if(!navigator.geolocation) return alert('Browser does not support geolocation API');
  navigator.geolocation.getCurrentPosition(p=>{
    manual.value = p.coords.latitude.toFixed(5)+','+p.coords.longitude.toFixed(5);
    fetchUV(p.coords.latitude,p.coords.longitude);
  }, e => alert('Could not get location: '+e.message));
};

document.getElementById('check').onclick = () => {
  const text = manual.value.trim();
  if(!text) return alert('Please enter lat,lon or use Get Location.');
  const parts = text.split(',').map(s=>s.trim());
  if(parts.length<2) return alert('Format: lat,lon (e.g., 39.92,32.85)');
  const lat=parseFloat(parts[0]), lon=parseFloat(parts[1]);
  if(isNaN(lat)||isNaN(lon)) return alert('Invalid coordinates');
  fetchUV(lat, lon);
};

manual.value='41.00824,28.97836';
fetchUV(41.00824,28.97836);
</script>
</body>
</html>
